class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] colors = new int[n];

        Arrays.fill(colors,-1);

        for(int i=0;i<n;i++){
            if(colors[i]==-1){
                if(BFS(graph,i,colors,1)==false){
                    return false;
                }
            }
        }
        return true;
    }
    private boolean BFS(int[][] graph, int curr, int[] colors, int currcolor){

        Queue<Integer> q = new LinkedList<>();
        q.offer(curr);
        colors[curr] = currcolor;

        while(!q.isEmpty()){
            int u = q.poll();
            for(int v : graph[u]){
                if(colors[v]==colors[u]){
                    return false;
                }else if(colors[v]==-1){
                    colors[v] = 1 - colors[u];
                    q.offer(v);
                }
            }
        }
        return true;
    }
}